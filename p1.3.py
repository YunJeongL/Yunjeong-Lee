# 파이썬 기초 순서
'''
1. 단일 데이터 관련
-문자열("가나다",'abc',...)
'''
print('='*70)
# 문자열 표기법
# '...', "...", '''...''', """..."""
# 4가지로 표현 가능
# 1줄로 표현할 경우 : '',""
# 여러줄 표현, 구조를 유지하는 문자열, 주석용 : ''' ''', """ """
a= 'hi'
print(a)
a= "hi"
print(a)
a='abcde"kkk"ppp'
print(a)
a="abcde'kkk'ppp"
print(a)
# 이스케이프 문자로 동일한 기호를 문자열 내부에서 사용가능
a="abcde\'kkk\'ppp"
print(a)
a='''
asdfg
efesw
ijkld
'''
print(a)
#########################################################################
# 문자열 더하기
a='123'
b='567'
print(a+b)
# 문자열 반복
print("="*70)
#########################################################################
# 인덱싱 indexing(중요★★★)
a='0123456789'
# 인덱싱 : 문자열에서 특정 문자를 획득 방식
# 문법 : 변수[순서(정방향,역방향 둘 다 가능)]
# 대괄호:[], 중괄호:{}, 소괄호:()
# a라는 변수에서 1을 출력하시오
# 인덱스 계산은 정방향일 경우 0부터 따진다
# ex) 0번째, 1번째, 2번째,...
print(a[1])
# a라는 변수에서 8을 출력하시오
print(a[8])
# 역방향은 -1, -2, -3,...
print(a[-2])
# 인덱싱은 가까운 쪽에서 해결한다
########################################################################
# 범위에 해당되는 데이터 획득 => 슬라이싱
url = "http://google.com/img/sdjklfiej.jpg"
# 변수[시작인덱스:끝인덱스]
a='0123456789'
# 변수 a의 값 중에서 1~8까지 출력하시오
print(a[1:9])
print(a[1:-1])
# 시작 범위 및 끝 범위가 없으면 복사와 동일한 결과
print(a[:])
# 0123 출력하시오
print(a[0:4])
# 인덱스를 앞자리를 안쓰면 처음부터~
print(a[:4])
url = "http://google.com/img/a.jpg"
# 파일명만 출력하시오
print(url[-5:])
# 변수[시작인덱스:끝인덱스:스탭(1개씩, 혹은 n개씩 데이터 획득)]
print(url[-5::1])
print(url[-5::2])
######################################################################
# 포맷팅
# 어떤 데이터를 문자열과 결합하여 특정 형태로 표현하는 방식
a=1
b=2
# x + y = z 라는 형태로 출력되게 문자열을 구성하시오
print('%d + %d = %d' % (a,b,a+b))
print('%d / %d = %f' % (a,b,a/b))
# 출력하고자하는 변수의 타입과 포맷팅의 표현이 일치하지않으면
# 부정확하게 나오거나, 오류를 출력할수도 있다
# 모던하게 문제없이 받자
print('%s / %s = %s' % (a,b,a/b))
# 인덱스로 포맷팅을 구성하고 싶다
print('{0} / {1} = {2}'.format(a,b,a/b))
# 인자에 이름을 부여하여 포맷팅
print('{0} / {1} = {result}'.format(a,b,result=(a/b)))
##################################################################
# 문자열 지원함수들(특정 기능하는)
a="0123456789"
print('문자열의 문자 개수?', a.count('1'))
print('문자열의 문자 개수?', a.count('-1'))
# a라는 문자열에 A라는 알파벳 단어가 존재하는가?
print(a.count('A')==0)
# 조인 기능
b=","
print(b.join(a))

# 공백 제거
a= '            xdm,djjjjjjjljsf    mkjijels      '
print('[%s]' % a)
# 왼쪽 공백 제거
print('[%s]' % a.lstrip())
# 오른쪽 공백 제거
print('[%s]' % a.rstrip())
# 앞뒤 공백 제거
print('앞뒤 공백 제거 [%s]' % a.strip())
# 대소문자 변환 -> 응용 프로그램에서 대문자만 혹은 소문자로만 판단하는 경우 주로 사용
a='abcdASDE멀티123!@#~'
print(a)
print(a.lower(), a.upper())
###########################################################################
# 포맷팅에서 자리칸 표현
# 20칸 자리에 문자열을 배치해라
print('[%20s]' % '12345')
print('[%-20s]' % '12345')
# 소수부에서 자리수를 지정하면 반올림되므로 값의 변화 주의
print('[%0.2f]' % 3.14657654)
print('[%10.2f]' % 3.14157654)
###########################################################################
# 나누기 <-> 조인
a = 'sjiejlm'
b = ','
c = b.join(a)
# , <= 구분자
print(c)
# 구분자 ,를 기준으로 c 문자열을 나누겠다
print(c.split(','))
url = "http://google.com/img/234/a.jpg"
print(url.split('/'))
print(url.split('/')[5])
print(url.split('/')[url.count('/')])
###################################################################
# 치환식 <= 포맷팅+치환식+자리수 : 인덱스로 포맷팅 방식
a = '123{0}456'.format('k')
print(a)
# 자리수 10개 
a = '123{0:10}456'.format('k')
print(a)
a = '123{0:<10}456'.format('k')
print(a)
# k를 뒤로 붙여서 10자리
a = '123{0:>10}456'.format('k')
print(a)
# k를 가운데 10자리
a = '123{0:^10}456'.format('k')
print(a)
a = '123{0:*^10}456'.format('k')
print(a)
# 문자열은 immutable(변경불가능)하다